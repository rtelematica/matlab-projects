%% Transmultiplexor
clc
clear all
%Numero de canales
Nc = 2;

%Fases
fases = log2(Nc);

%Tamaño de la señal de estrada para cada canal
tamX = 4;

%Factor de diezmado
FD = 2;
%Factor de interpolacion
FI = 2;

%Señales de entrada: La señal se genera como una matriz de Nc filas x tamX
%columnas, cada celda de la matriz es igualada a var que se incrementa en
%cada iteracion.
var = 1;
x = 0;
for j = 1 : Nc
    for i = 1 : tamX
        x(j,i) = var;
        var = var + 1;
    end
end

%Llamamos a funcion generadora de filtros wavelet
[h0,h1,g0,g1] = filtrosWavelet('db2')
pause

%Matriz de fases: Matriz donde se almacenran la suma obtenidoa en cada rama
tamf = length(h0);
tamInt = tamX;
%Se determina el mayor tamaño que puede alcanzar la matriz
for i = 1 : fases     
    tamInt = (tamInt * 2 + tamf ) - 1;    
end

%Inicializamos matriz intermediria
matSumInt(1:Nc, 1:tamInt) = 0;

%Asigamos x a la matriz
matSumInt(1:Nc, 1:tamX) = x;
tamM = tamX;
%Filtrado de sintesis
acusuma = 0;
acufcanal = 2*Nc;
acu = 0;

for  n = 1 : fases
    n
    acufcanal = acufcanal/2;
    fcanal = acufcanal;
    while fcanal > 0
        
        if mod(fcanal,FI) == 0
            display 'g1'
            gint = g1;
        else
            display 'g0'
            gint = g0;
        end
       
        acu = acu + conv(upsample(matSumInt(fcanal, 1:tamM),FI),gint);        
        
        if mod(fcanal+1, FI) == 0                         
            lacu = length(acu);
            matSumInt(fcanal, 1:lacu) = acu
            pause
            acu = 0;            
        end
        
        fcanal = fcanal -1;        
    end        
    
    tamM = (tamM * 2 + tamf ) - 1;    
end

y = matSumInt(1,:)

%Filtrado de analisis
acusuma = 0;
fcanal = 1;
acu = 0;
hint = 0;
p = 0:
for  n = 1 : fases      
    fcanal = fcanal * 2;
    while fcanal > 0
        
        if mod(fcanal, FD+) == 0                         
            y = matSumInt(fcanal/2-p,);
            p = p + 1;
        end
        
        if mod(fcanal,FD) == 0
            display 'h1'
            hint = h1;
        else
            display 'g0'
            hint = h0;
        end
       
        %Se realiza convolucion y diezmado
        acu = downsample(conv(y(tamF:length(y)),hint),FD);
        matSumInt(fcanal,1:length(acu)) = acu;
        acu = 0;        
        
        fcanal = fcanal -1;        
        
    end        
    
    tamM = (tamM / 2 + tamf ) - 1;    
end

matSumInt
